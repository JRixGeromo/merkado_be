// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  vendorProfile   VendorProfile?
  orders          Order[]
  addresses       Address[]
  sentMessages    Chat[]  @relation("SentMessages")
  receivedMessages Chat[] @relation("ReceivedMessages")
}

model VendorProfile {
  id          Int       @id @default(autoincrement())
  location    String?   // For Google Maps location
  products    Product[] @relation("VendorProducts")
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  stock       Int       @default(0)
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  vendor      VendorProfile @relation("VendorProducts", fields: [vendorId], references: [id])
  vendorId    Int
  orders      Order[]
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  products    Product[]  // Add this reverse relation to the Product model
}

model Order {
  id          Int       @id @default(autoincrement())
  status      OrderStatus @default(PENDING)
  products    Product[]
  customer    User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Address {
  id          Int       @id @default(autoincrement())
  postalCode  String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Chat {
  id          Int       @id @default(autoincrement())
  message     String
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  senderId    Int
  recipient   User      @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId Int
  sentAt      DateTime  @default(now())
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
