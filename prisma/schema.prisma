generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  email            String?         @unique
  password         String?
  firstName        String?
  lastName         String?
  birthdate        DateTime?
  gender           Gender?
  profileImageUrl  String?
  vendorProfile    VendorProfile?
  phoneNo          String?         // Optional phone number field
  orders           Order[]
  addresses        Address[]
  sentMessages     Chat[]          @relation("SentMessages")
  receivedMessages Chat[]          @relation("ReceivedMessages")
  socialAccounts   SocialAccount[]
  wishes           Wish[]
  favorites        Favorite[]
  reactions        Reaction[]
  ratings          Rating[]        // Updated to add reverse relation for Rating
  comments         Comment[]       // User's comments on products and shows
  followers        Follow[]        @relation("Followers")
  following        Follow[]        @relation("Following")
  spreads          Spread[]        // Products or shows spread by the user
  liveShowsViewed  LiveShow[]      @relation("LiveShowViewers") // Shows viewed by the user
  chatRooms        ChatParticipant[] // Chat rooms the user participates in (group chat)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Product {
  id              Int             @id @default(autoincrement())
  name            String
  stock           Int             @default(0)
  price           Float
  salePrice       Float?
  longDescription String? 
  images          ProductImage[]  
  category        ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId      Int
  vendor          VendorProfile   @relation("VendorProducts", fields: [vendorId], references: [id])
  vendorId        Int
  unit            UnitOfMeasure   @relation(fields: [unitId], references: [id])
  unitId          Int
  brand           Brand           @relation(fields: [brandId], references: [id]) // New relation to Brand model
  brandId         Int             // Foreign key to Brand
  isFeatured      Boolean         @default(false) // New isFeatured field
  orders          OrderItem[]    
  wishes          Wish[]          
  favorites       Favorite[]      
  reactions       Reaction[]      
  ratings         Rating[]        
  comments        Comment[]       
  spreads         Spread[]        
  liveShows       LiveShow[]      @relation("LiveShowProducts") 
  offlineShows    OfflineShow[]   @relation("OfflineShowProducts") 
  isActive        Boolean         @default(true) 
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] // Relation to products
}

model Rating {
  id          Int      @id @default(autoincrement())
  score       Int      @default(0)  // Rating score (e.g., 1 to 5 stars)
  comment     String?  // Optional comment with the rating
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  user        User     @relation(fields: [userId], references: [id]) // Added reverse relation for User
  userId      Int
  createdAt   DateTime @default(now())
}

model ProductCategory {
  id             Int               @id @default(autoincrement())
  name           String
  description    String?           // Optional description for the category
  iconUrl        String?           // Small icon for category representation
  bannerImageUrl String?           // Banner image for category page or section
  parentCategoryId Int?            // Foreign key to self-reference parent category
  parentCategory   ProductCategory? @relation("Subcategories", fields: [parentCategoryId], references: [id])
  subcategories    ProductCategory[] @relation("Subcategories")
  products       Product[]         // Relation to products
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model SocialAccount {
  id                Int    @id @default(autoincrement())
  provider          String // e.g., "google", "facebook"
  providerAccountId String // The unique ID provided by the social login provider (e.g., Google ID, Facebook ID)
  user              User   @relation(fields: [userId], references: [id])
  userId            Int
  createdAt         DateTime @default(now())
}

model VendorProfile {
  id              Int       @id @default(autoincrement())
  businessName    String    @default("Your Business")
  businessType    String    @default("General")
  businessPhone   String    @default("N/A")
  businessEmail   String?
  businessLicense String?
  taxId           String?
  website         String?
  location        String?
  products        Product[] @relation("VendorProducts")
  user            User      @relation(fields: [userId], references: [id])
  userId          Int       @unique
  liveShows       LiveShow[]
  offlineShows    OfflineShow[]
  marketingCampaigns MarketingCampaign[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Wish {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Favorite {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Reaction {
  id        Int      @id @default(autoincrement())
  type      ReactionType
  product   Product?  @relation(fields: [productId], references: [id])
  productId Int?
  liveShow  LiveShow? @relation(fields: [liveShowId], references: [id])
  liveShowId Int?
  offlineShow OfflineShow? @relation(fields: [offlineShowId], references: [id])
  offlineShowId Int?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

enum ReactionType {
  LIKE
  DISLIKE
  LOVE
  WOW
  SAD
  ANGRY
  SPICY
  SWEET
  CRUNCHY
  MEH
  TOO_SALTY
  TOO_SWEET
}

model Order {
  id               Int           @id @default(autoincrement())
  status           OrderStatus   @default(PENDING)
  totalAmount      Float         // Total price of the order
  customer         User          @relation(fields: [userId], references: [id])
  userId           Int
  payment          Payment?
  orderItems       OrderItem[]   // Relation to order items
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  servingOption    ServingOption @default(PICKUP)
  paymentOption    PaymentOption @default(CASH)
  buyingOption     BuyingOption  @default(DIRECT)
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  order       Order   @relation(fields: [orderId], references: [id])
  orderId     Int
  product     Product @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int     @default(1)
  priceAtTime Float
}

enum ServingOption {
  PICKUP
  DELIVERY
}

enum PaymentOption {
  CASH
  CASH_ON_DELIVERY
}

enum BuyingOption {
  RESERVATION
  DIRECT
}

model Payment {
  id            Int           @id @default(autoincrement())
  method        PaymentMethod
  amount        Float
  transactionId String
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int           @unique
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
}

enum PaymentMethod {
  GCASH
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  imageUrl  String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model UnitOfMeasure {
  id       Int       @id @default(autoincrement())
  name     String    @unique // e.g., "sack", "serve", "bundle"
  products Product[]
}

model Address {
  id         Int    @id @default(autoincrement())
  postalCode String
  latitude   Float?
  longitude  Float?
  user       User   @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime @default(now())
}

model Chat {
  id          Int      @id @default(autoincrement())
  message     String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    Int
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId Int
  chatRoom    ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId  Int
  sentAt      DateTime  @default(now())
  attachments ChatAttachment[]
}


model ChatRoom {
  id          Int            @id @default(autoincrement())
  name        String?        // Optional name for group chats
  participants ChatParticipant[] // Relation to participants
  messages    Chat[]         // Relation to messages in this room
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ChatParticipant {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
  joinedAt  DateTime @default(now())
}

model ChatAttachment {
  id      Int    @id @default(autoincrement())
  fileUrl String
  chat    Chat   @relation(fields: [chatId], references: [id])
  chatId  Int
}

model LiveShow {
  id          Int             @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  duration    Int
  vendor      VendorProfile   @relation(fields: [vendorId], references: [id])
  vendorId    Int
  products    Product[]       @relation("LiveShowProducts")
  viewers     User[]          @relation("LiveShowViewers")
  liveSelling Boolean         @default(true)
  reactions   Reaction[]      // Reactions on the live show
  comments    Comment[]       // Comments on the live show
  spreads     Spread[]        // Users who have spread the live show
  content     ShowContent[]   // Reverse relation for ShowContent
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model OfflineShow {
  id          Int             @id @default(autoincrement())
  title       String
  description String?
  scheduleAt  DateTime
  interval    Int
  vendor      VendorProfile   @relation(fields: [vendorId], references: [id])
  vendorId    Int
  products    Product[]       @relation("OfflineShowProducts") // Added reverse relation
  content     ShowContent[]
  reactions   Reaction[]
  comments    Comment[]
  spreads     Spread[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ShowContent {
  id          Int     @id @default(autoincrement())
  contentUrl  String
  contentType ContentType
  liveShow    LiveShow? @relation(fields: [liveShowId], references: [id])
  liveShowId  Int?
  offlineShow OfflineShow? @relation(fields: [offlineShowId], references: [id])
  offlineShowId Int?
  duration    Int?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  liveShow  LiveShow? @relation(fields: [liveShowId], references: [id])
  liveShowId Int?
  offlineShow OfflineShow? @relation(fields: [offlineShowId], references: [id])
  offlineShowId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id        Int      @id @default(autoincrement())
  follower  User     @relation("Followers", fields: [followerId], references: [id])
  followerId Int
  following User     @relation("Following", fields: [followingId], references: [id])
  followingId Int
  createdAt DateTime @default(now())
}

model Spread {
  id        Int      @id @default(autoincrement())
  product   Product?  @relation(fields: [productId], references: [id])
  productId Int?
  liveShow  LiveShow? @relation(fields: [liveShowId], references: [id])
  liveShowId Int?
  offlineShow OfflineShow? @relation(fields: [offlineShowId], references: [id])
  offlineShowId Int?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

enum ContentType {
  VIDEO
  IMAGE
}

model MarketingCampaign {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  discount    Float?
  vendor      VendorProfile @relation(fields: [vendorId], references: [id])
  vendorId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
