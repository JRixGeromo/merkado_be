generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  email            String?         @unique
  password         String?
  firstName        String?
  lastName         String?
  birthdate        DateTime?
  gender           Gender?
  profileImageUrl  String?
  vendorProfile    VendorProfile?
  orders           Order[]
  addresses        Address[]
  sentMessages     Chat[]          @relation("SentMessages")
  receivedMessages Chat[]          @relation("ReceivedMessages")
  socialAccounts   SocialAccount[]
  wishes           Wish[]
  favorites        Favorite[]
  reactions        Reaction[]
  ratings          Rating[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Product {
  id              Int             @id @default(autoincrement())
  name            String
  stock           Int             @default(0)
  price           Float
  salePrice       Float?
  longDescription String? // Detailed product info
  images          ProductImage[] // Relation to ProductImage model
  category        ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId      Int
  vendor          VendorProfile   @relation("VendorProducts", fields: [vendorId], references: [id])
  vendorId        Int
  unit            UnitOfMeasure   @relation(fields: [unitId], references: [id])
  unitId          Int
  orders          OrderItem[] // Link to OrderItem model
  wishes          Wish[] // Relation to Wish model
  favorites       Favorite[] // Relation to Favorite model
  reactions       Reaction[] // Relation to Reaction model
  ratings         Rating[] // Relation to Rating model
  createdAt       DateTime        @default(now())   // Timestamp when the product is created
  updatedAt       DateTime        @updatedAt        // Timestamp when the product is last updated
}

model Rating {
  id          Int      @id @default(autoincrement())
  score       Int      @default(0)  // Rating score (e.g., 1 to 5 stars)
  comment     String?  // Optional comment with the rating
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int      // Relation to the rated product
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      // Relation to the user who gave the rating
  createdAt   DateTime @default(now())  // Timestamp when the rating was created
}

model ProductCategory {
  id             Int       @id @default(autoincrement())
  name           String
  description    String?   // Optional description for the category
  iconUrl        String?   // Small icon for category representation
  bannerImageUrl String?   // Banner image for category page or section
  products       Product[] // Relation to products
  createdAt      DateTime  @default(now())  // Timestamp when the category is created
  updatedAt      DateTime  @updatedAt       // Timestamp when the category is last updated
}

model SocialAccount {
  id                Int    @id @default(autoincrement())
  provider          String // e.g., "google", "facebook"
  providerAccountId String // The unique ID provided by the social login provider (e.g., Google ID, Facebook ID)
  user              User   @relation(fields: [userId], references: [id])
  userId            Int // Links back to the User model
  createdAt         DateTime @default(now())   // Track when the social account was linked
}

model VendorProfile {
  id              Int       @id @default(autoincrement())
  businessName    String    @default("Your Business")
  businessType    String    @default("General")
  businessPhone   String    @default("N/A")
  businessEmail   String?
  businessLicense String?
  taxId           String?
  website         String?
  location        String?
  products        Product[] @relation("VendorProducts")
  user            User      @relation(fields: [userId], references: [id])
  userId          Int       @unique
  marketingCampaigns MarketingCampaign[]
  createdAt       DateTime        @default(now())   // Timestamp when the vendor profile is created
  updatedAt       DateTime        @updatedAt        // Timestamp when the vendor profile is last updated
}


model Wish {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())  // Timestamp when the wish is created
}

model Favorite {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())  // Timestamp when the favorite is created
}

model Reaction {
  id        Int      @id @default(autoincrement())
  type      ReactionType
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())  // Timestamp when the reaction is created
}

enum ReactionType {
  LIKE
  DISLIKE
}

model Order {
  id               Int           @id @default(autoincrement())
  status           OrderStatus   @default(PENDING)
  totalAmount      Float         // Total price of the order
  customer         User          @relation(fields: [userId], references: [id])
  userId           Int
  payment          Payment?      // Add this to make the relation bidirectional
  orderItems       OrderItem[]   // Relation to order items
  createdAt        DateTime      @default(now())   // Timestamp when the order is created
  updatedAt        DateTime      @updatedAt        // Timestamp when the order is last updated
  
  // Serving option: Pickup or Delivery
  servingOption    ServingOption @default(PICKUP)

  // Payment option: Cash or Cash on Delivery
  paymentOption    PaymentOption @default(CASH)

  // Buying option: Reservation or Direct Purchase
  buyingOption     BuyingOption  @default(DIRECT)
}

enum ServingOption {
  PICKUP
  DELIVERY
}

enum PaymentOption {
  CASH
  CASH_ON_DELIVERY
}

enum BuyingOption {
  RESERVATION
  DIRECT
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  order       Order   @relation(fields: [orderId], references: [id])
  orderId     Int
  product     Product @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int     @default(1)
  priceAtTime Float // Price of the product at the time of purchase
}

model Payment {
  id            Int           @id @default(autoincrement())
  method        PaymentMethod
  amount        Float
  transactionId String
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int           @unique
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())  // Timestamp when the payment is created
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  imageUrl  String // URL to the image in cloud storage or path if using local storage
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model UnitOfMeasure {
  id       Int       @id @default(autoincrement())
  name     String    @unique // e.g., "sack", "serve", "bundle"
  products Product[] // Relation to products using this unit
}

model Address {
  id         Int    @id @default(autoincrement())
  postalCode String
  latitude   Float?  // Latitude for Google Maps
  longitude  Float?  // Longitude for Google Maps
  user       User   @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime @default(now())  // Timestamp when the address is created
}

model Chat {
  id          Int      @id @default(autoincrement())
  message     String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    Int
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId Int
  sentAt      DateTime @default(now())  // Timestamp when the message is sent
  attachments ChatAttachment[] // Relation to ChatAttachment model
}

model ChatAttachment {
  id      Int    @id @default(autoincrement())
  fileUrl String // URL to file (images, documents, etc.)
  chat    Chat   @relation(fields: [chatId], references: [id])
  chatId  Int
}

model MarketingCampaign {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  discount    Float?   // Percentage or flat discount
  vendor      VendorProfile @relation(fields: [vendorId], references: [id])
  vendorId    Int
  createdAt   DateTime @default(now())   // Timestamp when the campaign is created
  updatedAt   DateTime @updatedAt        // Timestamp when the campaign is last updated
}

enum PaymentMethod {
  GCASH
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
